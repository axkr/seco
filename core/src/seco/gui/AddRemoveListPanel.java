/*
 * This file is part of the Scriba source distribution. This is free, open-source 
 * software. For full licensing information, please see the LicensingInformation file
 * at the root level of the distribution.
 *
 * Copyright (c) 2006-2007 Kobrix Software, Inc.
 */
package seco.gui;

import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.filechooser.*;
import java.awt.event.KeyEvent;
import java.io.File;

/**
 * Common panel representing a List of files and 2 buttons ADD and REMOVE
 * Pressing on ADD button will pops up a configurable JFileChooser
 * for selecting the new file
 *
 * @author  Administrator
 */
public class AddRemoveListPanel extends javax.swing.JPanel
{
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JButton Remove;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList list;
    // End of variables declaration//GEN-END:variables
    
    private List objects = null;
    //the following is for the file chooser
    private String rootDir = "";
    private String descr = "";
    String [] ext = new String[]{""};
    boolean multi = false;
    
    private String lastCurrDir = "";
    
    /** Creates new form AddRemoveListPanel */
    public AddRemoveListPanel()
    {
        initComponents();
    }
    
    /**
     * Creates new form AddRemoveListPanel
     * @param _objects - list with filenames
     * @param _rootDir - root dir for the JFileChooser
     * @param _ext - array with allowed file extensions
     * @param _descr - description for the extension
     */
    public AddRemoveListPanel(List _objects, String _rootDir,
                              String[] _ext,   String _descr)
    {
        initComponents();
        ext = _ext;
        descr = _descr;
        rootDir = _rootDir;
        objects = _objects;
        list.setListData(objects.toArray());
    }
    
    /*
     * Thus you can allow user to add multiple file at once
     * Simply delegates to JFileChooser used for adding files 
     */
    public void setMultipleFileSelection(boolean _multi)
    {
        multi = _multi;
    }
    
    public void setDir(String _rootDir)
    {
        rootDir = _rootDir;
        lastCurrDir = rootDir;
    }
    
    /*
     * Returns the last directory used. Suitable for enhancing "user experience"
     */
    public String getLastCurrentDir()
    {
        return lastCurrDir;
    }
    
    public void setData(List _objects)
    {
        objects = _objects;
        list.setListData(objects.toArray());
    }
    
    public void setFileDescr(String[] _ext, String _descr)
    {
        ext = _ext;
        descr = _descr;
    }
    
    public List getValues()
    {
        return objects;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    private void initComponents()                          
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        list = new javax.swing.JList();
        Add = new javax.swing.JButton();
        Remove = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        setMinimumSize(new java.awt.Dimension(180, 100));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(400, 80));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(400, 300));
        list.setMaximumSize(new java.awt.Dimension(1000, 800));
        jScrollPane1.setViewportView(list);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);

        Add.setText("Add");
        Add.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                AddActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        add(Add, gridBagConstraints);

        Remove.setText("Remove");
        Remove.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                RemoveActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        add(Remove, gridBagConstraints);

    }
    
    protected void RemoveActionPerformed(java.awt.event.ActionEvent evt)                                       
    {
        if(list.getSelectedIndex() == -1)
            return;
        else
        {
            Object[] removed = list.getSelectedValues();
            for(int i=0; i<removed.length; i++)
               objects.remove(removed[i]);
            list.setListData(objects.toArray());
        }
    }
    
    protected void AddActionPerformed(java.awt.event.ActionEvent evt)
    {
        JFileChooser chooser = new JFileChooser();
        chooser.setControlButtonsAreShown(false);
        FileFilter filter = new FileFilter() 
        {
            public boolean accept(File path)
            {
                return path.getAbsoluteFile().toString().endsWith(".jar") ||
                       path.getAbsoluteFile().toString().endsWith(".zip") || 
                       path.isDirectory();
            }
            public String getDescription() { return descr; }
        };
        chooser.setFileFilter(filter);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        File file = new File(rootDir);
        if(file.exists())
            chooser.setCurrentDirectory(file);
        
        chooser.setMultiSelectionEnabled(multi);
        
/*        DialogDescriptor d = new DialogDescriptor(chooser, "Specify the file:");
        d.setModal(true);
        d.setMessageType(NotifyDescriptor.QUESTION_MESSAGE);
        d.setOptionType(NotifyDescriptor.OK_CANCEL_OPTION);
        if (DialogDisplayer.getDefault().notify(d) == NotifyDescriptor.OK_OPTION)
        {
            if(multi)
            {
                File [] files = chooser.getSelectedFiles();
                for(int i=0; i< files.length; i++)
                {
                    String fpath = files[i].getAbsolutePath();
                    if(i==0 && files[i].getParentFile() != null)
                       lastCurrDir = files[i].getParentFile().getAbsolutePath();
                    if(!objects.contains(fpath))
                        objects.add(fpath);
                }
            }
            else
            {
                String path = chooser.getSelectedFile().getAbsolutePath();
                if(chooser.getSelectedFile().getParentFile() != null)
                   lastCurrDir = 
                   chooser.getSelectedFile().getParentFile().getAbsolutePath();
                if(!objects.contains(path))
                    objects.add(path);
            }
            list.setListData(objects.toArray());
            firePropertyChange("value",null,null);
        } */
    }    
}
