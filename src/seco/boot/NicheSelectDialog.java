/*
 * This file is part of the Scriba source distribution. This is free, open-source 
 * software. For full licensing information, please see the LicensingInformation file
 * at the root level of the distribution.
 *
 * Copyright (c) 2006-2007 Kobrix Software, Inc.
 */
package seco.boot;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.*;

import javax.swing.*;
import javax.swing.border.*;

import seco.U;

import java.util.*;
import java.io.File;

/**
 *
 * @author  boris
 */
public class NicheSelectDialog extends javax.swing.JDialog 
{
	private static final long serialVersionUID = 3767176947488620291L;
	
	private boolean succeeded = false;
    private Map<String, File> niches = new HashMap<String, File>();
    
    private void updateNichesModel()
    {
        DefaultListModel newModel = new DefaultListModel();
        for (String s : (Set<String>)niches.keySet())
            newModel.addElement(s);
        lstNiches.setModel(newModel);
        handleListSelection(null);
    }
    
    public NicheSelectDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public String getSelectedNiche()
    {
        return (String)lstNiches.getSelectedValue();
    }
    
    public boolean getSucceeded()
    {
        return succeeded;
    }
    
    public void setNiches(Map<String, File> all)
    {
        this.niches = all;
        updateNichesModel();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() 
    {
    	Rectangle b = getBounds();
    	b.width = 600;
    	b.height = 255;
    	Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
    	b.x = dim.width / 2 - b.width / 2;
    	b.y = dim.height / 2 - b.height / 2;
    	setBounds(b);
    	JPanel pane = (JPanel)getContentPane();
    	pane.setBackground(Color.white);
    	helpLabel.setText(helpText);
    	helpLabel.setFont(new Font("Dialog", Font.PLAIN, 12));
    	helpLabel.setBackground(Color.white);
    	helpLabel.setPreferredSize(new Dimension(180, 200));
    	lstNiches.setPreferredSize(new Dimension(180, 200));
    	logoLabel.setIcon(new ImageIcon(this.getClass().getResource("/seco/resources/logo.gif")));
    	copyrightLabel.setFont(new Font("Dialog", Font.ITALIC, 10));
    	SpringLayout layout = new  SpringLayout();
    	pane.setLayout(layout);
    	pane.add(logoLabel);
    	layout.putConstraint(SpringLayout.WEST, logoLabel, 5, SpringLayout.WEST, pane);
    	layout.putConstraint(SpringLayout.NORTH, logoLabel, 0, SpringLayout.NORTH, pane);
    	pane.add(helpLabel);
    	layout.putConstraint(SpringLayout.NORTH, helpLabel, 5, SpringLayout.SOUTH, logoLabel);
    	layout.putConstraint(SpringLayout.WEST, helpLabel, 5, SpringLayout.WEST, pane);
    	pane.add(scroll);
    	layout.putConstraint(SpringLayout.NORTH, scroll, 30, SpringLayout.NORTH, pane);
    	layout.putConstraint(SpringLayout.WEST, scroll, 10, SpringLayout.EAST, helpLabel);
    	pane.add(btnOpen);
    	layout.putConstraint(SpringLayout.WEST, btnOpen, 0, SpringLayout.WEST, scroll);
    	layout.putConstraint(SpringLayout.NORTH, btnOpen, 10, SpringLayout.SOUTH, scroll);
    	pane.add(btnCancel);
    	layout.putConstraint(SpringLayout.WEST, btnCancel, 5, SpringLayout.EAST, btnOpen);
    	layout.putConstraint(SpringLayout.NORTH, btnCancel, 10, SpringLayout.SOUTH, scroll);
    	JPanel sideButtons = new JPanel();
    	sideButtons.setBackground(Color.white);
    	sideButtons.setLayout(new GridLayout(3,1,0,5));
    	sideButtons.add(btnNew);
    	sideButtons.add(btnEdit);
    	sideButtons.add(btnRemove);
    	pane.add(sideButtons);
    	pane.add(copyrightLabel);
    	layout.putConstraint(SpringLayout.EAST, copyrightLabel, -5, SpringLayout.EAST, pane);
    	layout.putConstraint(SpringLayout.SOUTH, copyrightLabel, -5, SpringLayout.SOUTH, pane);
    	layout.putConstraint(SpringLayout.WEST, sideButtons, 5, SpringLayout.EAST, scroll);
    	layout.putConstraint(SpringLayout.NORTH, sideButtons, 30, SpringLayout.NORTH, pane);
    	
    	setResizable(false);
    	setUndecorated(true);
    	pane.setBorder(new EtchedBorder());
    	
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        btnOpen.setEnabled(false);
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOpenNiche(evt);
            }
        });

        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancel(evt);
            }
        });

        lstNiches.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                handleListSelection(evt);
            }
        });

        lstNiches.addMouseListener(new MouseListener() {

			public void mouseClicked(MouseEvent e)
			{
				if (e.getClickCount() > 1)
					cmdOpenNiche(e);
			}
			public void mouseEntered(MouseEvent e) { }
			public void mouseExited(MouseEvent e){}
			public void mousePressed(MouseEvent e){}			
			public void mouseReleased(MouseEvent e) {}
        });
        scroll.setViewportView(lstNiches);

        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewNiche(evt);
            }
        });

        btnRemove.setEnabled(false);
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveNiche(evt);
            }
        });

        btnEdit.setEnabled(false);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditNiche(evt);
            }
        });
    }

    private void cmdOpenNiche(java.util.EventObject evt) {//GEN-FIRST:event_cmdOpenNiche
        succeeded = true;
        setVisible(false);
    }

    private void cmdEditNiche(java.util.EventObject evt) {//GEN-FIRST:event_cmdEditNiche
        String selected = (String)lstNiches.getSelectedValue();
        if (!niches.containsKey(selected))
        {
            JOptionPane.showMessageDialog(null, 
                                          "Ooops, this is a bug: could not find niche location.",
                                          "Niche Edit Error",
                                          JOptionPane.ERROR_MESSAGE);  
            return;
        }
        NicheEditDialog dlg = new NicheEditDialog(this, true);
        dlg.setNicheLocation(niches.get(selected));
        dlg.setNicheName(selected);
        java.awt.Rectangle bounds = dlg.getBounds();
        bounds.x = this.getBounds().x;
        bounds.y = this.getBounds().y;
        dlg.setBounds(bounds);
        dlg.setVisible(true);
        if (dlg.getSucceeded())
        {
            niches.put(dlg.getNicheName(), dlg.getNicheLocation());
            if (!selected.equals(dlg.getNicheName()))
            {
                niches.remove(selected);
                updateNichesModel();
            }
            NicheManager.saveNiches(niches);            
        }
    }//GEN-LAST:event_cmdEditNiche

    private void cmdRemoveNiche(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveNiche
        String selected = (String)lstNiches.getSelectedValue();
        if (!niches.containsKey(selected))
        {
            JOptionPane.showMessageDialog(null, 
                                          "Ooops, this is a bug: could not find niche location.",
                                          "Niche Remove Error",
                                          JOptionPane.ERROR_MESSAGE);            
        }
        else
        {
            File location = niches.get(selected);
            if (location.exists())
            {
                if (JOptionPane.showConfirmDialog(null, 
                                                  "Do you want to also delete the niche location directory? All data will be lost!", 
                                                  "Niche Removal",
                                                  JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
                	NicheManager.deleteDirectory(location);
            }
            niches.remove(selected);
            NicheManager.saveNiches(niches);
            updateNichesModel();
        }
    }//GEN-LAST:event_cmdRemoveNiche

    public void setEnabled(boolean b) {
    }

    private void handleListSelection(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_handleListSelection
        boolean enabled = lstNiches.getSelectedValue() != null;
        btnOpen.setEnabled(enabled);
        btnEdit.setEnabled(enabled);
        btnRemove.setEnabled(enabled);
    }//GEN-LAST:event_handleListSelection

    private void cmdCancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancel
        succeeded = false;
        setVisible(false);
    }//GEN-LAST:event_cmdCancel

    private void cmdNewNiche(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewNiche
        NicheEditDialog dlg = new NicheEditDialog(this, true);
        dlg.setDefaultDirectory(U.findUserHome());
        java.awt.Rectangle bounds = dlg.getBounds();
        bounds.x = this.getBounds().x;
        bounds.y = this.getBounds().y;
        dlg.setBounds(bounds);
        
        for (dlg.setSucceeded(true); dlg.getSucceeded(); )        
        {
            dlg.setVisible(true);

            if (!dlg.getSucceeded())
            	break;
            
            if (dlg.getNicheName() == null || dlg.getNicheName().length() == 0)
            {
                JOptionPane.showMessageDialog(null, 
                                              "Please specify a niche name before proceeding.",
                                              "Wrong Niche Name Error",
                                              JOptionPane.ERROR_MESSAGE);
                continue;
            }            
            
            if (niches.get(dlg.getNicheName()) != null)
            {
                JOptionPane.showMessageDialog(null, 
                                              "Niche name already refers to an existing niche.",
                                              "Wrong Niche Name Error",
                                              JOptionPane.ERROR_MESSAGE);
                continue;
            }            
            
        	File location = dlg.getNicheLocation();
        	
            if (!NicheManager.isLocationOk(location))
            {
                if (NicheManager.isNicheLocation(location))
                {
                    if (JOptionPane.showConfirmDialog(null, 
                          "There is an existing HyperGraph Database at that location. Use it as the new niche?", 
                          "New Niche",
                          JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION)
                    	continue;
                }
                else if (JOptionPane.showConfirmDialog(null, 
                          "Create a " + dlg.getNicheName() + " sub-directory under " + location.getAbsolutePath() + "?",
                          "New Niche",
                          JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
                {
                	File newDir = new File(location, dlg.getNicheName());
                	newDir.mkdir();
                	location = newDir;
                	NicheManager.createNiche(dlg.getNicheName(), location);
                }
                else
                	continue;
            }
            else
            	NicheManager.createNiche(dlg.getNicheName(), location);
            
            // if we reach here, it means we're done 
            niches.put(dlg.getNicheName(), location);
            NicheManager.saveNiches(niches);
            updateNichesModel();
            break;
        }
                
    }//GEN-LAST:event_cmdNewNiche
    
    JLabel logoLabel = new JLabel();    
    JLabel copyrightLabel = new JLabel("Copyright (c) 2006-2007 by Kobrix Software Inc. and others.");
    String helpText = "<html><p><b>Welcome to Scriba!</b></p><p align='left'>If this is the first time you are running Scriba, you need to create a workspace. A workspace is called a <i>niche</i> in Scriba lingo. A niche is a dedicated directory on your computer where Scriba data will be managed. You can have many niches, but each running instance is bound to only one of them. </html>";
    JLabel helpLabel = new JLabel();
    JButton btnEdit = new JButton("Edit Niche");
    JButton btnOpen = new JButton("Enter Niche");
    JButton btnRemove = new JButton("Remove Niche");
    JButton btnCancel = new JButton("Exit");
    JButton btnNew = new JButton("New Niche");
    JList lstNiches = new JList();
    JScrollPane scroll = new JScrollPane();
    

}
